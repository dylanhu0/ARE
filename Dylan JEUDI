from tkinter import *
from random import randrange
import math,random
import cmath
#import numpy
import time


/////////////////////////
 L : Go
L1 : Cause1
L2 : Cause2
L3 : Cause3

M = [L1,L2,L3]

deplacementcause(random.sample(M[0, 1 ou 2],1)) pour chaque cause
///////////////////////////



#Paramètres balles et fenêtre

WIDTH = 1200
HEIGHT = 500

root = Tk()
canvas = Canvas(root, width = WIDTH, height= HEIGHT, bg='grey')
canvas.pack(padx =5, pady =5)
root.title('Modélisation')
canvas.pack()

LARGEUR = 1200
HAUTEUR = 500
RAYON = 13 # rayon de la balle

cangle=cmath.exp(0.05j)
cangle2=cmath.exp(0.08j)
cangle3=cmath.exp(0.09j)
cangle4=cmath.exp(0.08j)
cangle5=cmath.exp(0.05j)

print(cangle)

# position initiale au milieu

X=30
X2=1
X3=50
X4=70
X5=90

Y=30
Y2=1
Y3=50
Y4=70
Y5=90

XC=LARGEUR/2
YC=HAUTEUR/2




#Couleur pour deplacement (initial)
def couleur(Color):
    """
    definit une couleur aleatoirement entre vert = soutien, red = agresseur, white = neutre
    """
    x1=random.random()
    #Color=[]

    if x1>= 0 and x1 <= 0.2:
        Color.append('red')
    elif x1>0.20 and x1 <=0.60:
        Color.append('green')
    elif x1>0.6:
        Color.append('white')
        
    return Color

#Agrandissement de la liste

L=[]

for i in range(20):
    L=couleur(L)
    #print(L)

print(L)




#Couleur pour Cause1 

def couleurcause1(Color1):
    
    """changement de probabilité sur def couleur, vert = soutien, red = agresseur, white = neutre"""
    
    a=random.random()


    if a>= 0 and a <= 0.97:
        Color1.append('red')
    elif a>0.98 and a <=0.99:
        Color1.append('green')
    elif a>0.99:
        Color1.append('white')
        
    return Color1

#Agrandissement de la liste

L1=[]

for i in range(20):
    L1=couleurcause1(L1)
    #print(L1)
#print(L1)






#Couleur pour Cause2 

def couleurcause2(Color2):
    
    """changement de probabilité sur def couleur, vert = soutien, red = agresseur, white = neutre"""
    
    b=random.random()


    if b>= 0 and b <= 0.01:
        Color2.append('red')
    elif b>0.01 and b <=0.99:
        Color2.append('green')
    elif b>0.99:
        Color2.append('white')
        
    return Color2

#Agrandissement de la liste

L2=[]

for i in range(20):
    L2=couleurcause2(L2)
    #print(L2)
#print(L2)




#Couleur pour Cause3

def couleurcause3(Color3):
    
    """changement de probabilité sur def couleur, vert = soutien, red = agresseur, white = neutre"""
    
    c=random.random()


    if c>= 0 and c <= 0.01:
        Color3.append('red')
    elif c>0.1 and c <=0.02:
        Color3.append('green')
    elif c>0.02:
        Color3.append('white')
        
    return Color3

#Agrandissement de la liste

L3=[]

for i in range(20):
    L3=couleurcause3(L3)
    #print(L3)
#print(L3)


#M=[L1]+[L2]+[L3]
#n=M[0]
#b=M[1]
#v=M[2]


#print(M)




#Cause 1 : Orientation sexuelle

def deplacementcause():
    """  deplacement de la balle, situation initiale 1 rouge, 1 bleue, 1 blanche """
    
    global X,X2,X3,X4,X5,Y,Y2,Y3,Y4,Y5,DX,DY,RAYON,LARGEUR,HAUTEUR,Arret
    canvas.delete('all')
    
    Balle = canvas.create_oval(X-RAYON,Y-RAYON,X+RAYON,Y+RAYON,width=1,fill='red')
    Balle2 = canvas.create_oval(X2-RAYON,Y2-RAYON,X2+RAYON,Y2+RAYON,width=1,fill='blue')
    Balle3 = canvas.create_oval(X3-RAYON,Y3-RAYON,X3+RAYON,Y3+RAYON,width=1,fill=random)
    Balle4 = canvas.create_oval(X4-RAYON,Y4-RAYON,X4+RAYON,Y4+RAYON,width=1,fill=random)
    Balle5 = canvas.create_oval(X5-RAYON,Y5-RAYON,X5+RAYON,Y5+RAYON,width=1,fill='white')  
    
    
    
    Arret=False
    while not(Arret):  
        
        #vitesse des balles

        V=cangle*complex(X,Y)
        X=V.real
        Y=V.imag

        V2=cangle2*complex(X2,Y2)
        X2=V2.real
        Y2=V2.imag  

        V3=cangle3*complex(X3,Y3)
        X3=V3.real
        Y3=V3.imag

        V4=cangle4*complex(X4,Y4)
        X4=V4.real
        Y4=V4.imag

        V5=cangle5*complex(X5,Y5)
        X5=V5.real
        Y5=V5.imag       
        
        
        #change color
        #colors=["blue","red","green"]
        #canvas.itemconfig(Balle2, fill=numpy.random.choice(colors))
        
        


        # affichage
        canvas.coords(Balle,XC+X-RAYON,YC+Y-RAYON,XC+X+RAYON,YC+Y+RAYON)
        canvas.coords(Balle2,XC+X2-RAYON,YC+Y2-RAYON,XC+X2+RAYON,YC+Y2+RAYON)
        canvas.coords(Balle3,XC+X3-RAYON,YC+Y3-RAYON,XC+X3+RAYON,YC+Y3+RAYON)
        canvas.coords(Balle4,XC+X4-RAYON,YC+Y4-RAYON,XC+X4+RAYON,YC+Y4+RAYON)
        canvas.coords(Balle5,XC+X5-RAYON,YC+Y5-RAYON,XC+X5+RAYON,YC+Y5+RAYON)

        root.update()
        time.sleep(0.04)

#deplacementcause1 = deplacementcause(M[n])
#deplacementcause2 = deplacementcause(M[b])
#deplacementcause3 = deplacementcause(M[v])




#Deplacement

def deplacement():
    """  deplacement de la balle, situation initiale 1 rouge, 1 bleue, 1 blanche """
    
    
    global X,X2,X3,X4,X5,Y,Y2,Y3,Y4,Y5,DX,DY,RAYON,LARGEUR,HAUTEUR, Arret
    

    Balle = canvas.create_oval(X-RAYON,Y-RAYON,X+RAYON,Y+RAYON,width=1,fill='red')
    Balle2 = canvas.create_oval(X2-RAYON,Y2-RAYON,X2+RAYON,Y2+RAYON,width=1,fill='blue')
    Balle3 = canvas.create_oval(X3-RAYON,Y3-RAYON,X3+RAYON,Y3+RAYON,width=1,fill=random.sample(L,1))
    Balle4 = canvas.create_oval(X4-RAYON,Y4-RAYON,X4+RAYON,Y4+RAYON,width=1,fill=random.sample(L,1))
    Balle5 = canvas.create_oval(X5-RAYON,Y5-RAYON,X5+RAYON,Y5+RAYON,width=1,fill='white')  
      
    
    Arret=False
    while not(Arret):  
        
        #vitesse des balles

        V=cangle*complex(X,Y)
        X=V.real
        Y=V.imag

        V2=cangle2*complex(X2,Y2)
        X2=V2.real
        Y2=V2.imag  

        V3=cangle3*complex(X3,Y3)
        X3=V3.real
        Y3=V3.imag

        V4=cangle4*complex(X4,Y4)
        X4=V4.real
        Y4=V4.imag

        V5=cangle5*complex(X5,Y5)
        X5=V5.real
        Y5=V5.imag       
        
        
        #change color
        #colors=["blue","red","green"]
        #canvas.itemconfig(Balle2, fill=numpy.random.choice(colors))
        
        


        # affichage
        canvas.coords(Balle,XC+X-RAYON,YC+Y-RAYON,XC+X+RAYON,YC+Y+RAYON)
        canvas.coords(Balle2,XC+X2-RAYON,YC+Y2-RAYON,XC+X2+RAYON,YC+Y2+RAYON)
        canvas.coords(Balle3,XC+X3-RAYON,YC+Y3-RAYON,XC+X3+RAYON,YC+Y3+RAYON)
        canvas.coords(Balle4,XC+X4-RAYON,YC+Y4-RAYON,XC+X4+RAYON,YC+Y4+RAYON)
        canvas.coords(Balle5,XC+X5-RAYON,YC+Y5-RAYON,XC+X5+RAYON,YC+Y5+RAYON)

        root.update()
        time.sleep(0.04)
       
    
    

#Cercle
def cercle():
    global Arret
    ball2 = canvas.create_oval(10, 10, 60, 60, fill=random.sample(Color2,1))
    xspeed2 = 6
    yspeed2 = 6
    Arret=False
    while not(Arret):
        canvas.move(ball2, xspeed2, yspeed2)
        pos = canvas.coords(ball2)
        if pos[3] >= HEIGHT or pos[1] <= 0:
            yspeed2 = -yspeed2
        if pos[2] >= WIDTH or pos[0] <= 0:
            xspeed2 = -xspeed2
        root.update()
        time.sleep(0.04)
      
    
    
#Timer
t = 0
def timer():
    global t
    if t < 30:
        new_time = heur.get() + 1
        heur.set(new_time)
        root.after(1000, timer) # call this function again in 1,000 milliseconds
        t += 1
heur = IntVar()
heur.set(0)
            
frame = Frame(root, width=500, height=500)
frame.pack()

timer_display = Label(root, textvar= heur)
timer_display.place(x= 600, y= 495, anchor = CENTER)
        
    
    
    

def type1():
    global ty1
    if True:
        ty1=5
        print('type1')        
      
      
        
    
        
        
#Go        
def go():
    #timer
    global t
    t=0
    heur.set(0)
    timer()

    
    global Arret
    canvas.delete('all')
    Arret=False
    deplacement()
    
    
    
#Effacer
def Effacer():
    global t
    t=30
    heur.set(30)
    
    global Arret
    Arret=True
    canvas.delete('all')
    
Arret=False


# Echelle 
def maj(nouvelleValeur):
    # nouvelle valeur en argument
    print(nouvelleValeur)
def plus():
    Valeur.set(str(int(Valeur.get())+1))
    print(Valeur.get())
def moins():
    Valeur.set(str(int(Valeur.get())-1))
    print(Valeur.get())

Valeur = StringVar()
Valeur.set(0)
    
    


#Les positions et boutons

# Création d'un widget Scale
echelle = Scale(root,from_=0,to=5,resolution=1,orient=HORIZONTAL,\
length=300,width=20,label="Nombre d'amis",tickinterval=1,variable=Valeur,command=maj)
echelle.place(x=830, y=515)

# Création d'un widget Button (bouton +)
Button(root,text="+",command=plus).place(x=965, y=605)

# Création d'un widget Button (bouton -)
Button(root,text="-",command=moins).place(x=985, y=605)

#Les causes d agression
label = Label(root, text="Les causes d'agression", bg="gold2")
label.place(x=40,y=515)
#Ce n'est plus un checkbutton :/
Checkbutton(root,text="1)Being Gay, Lesbian, Bisexual or Transgender                      ",command=deplacementcause1).place(x=40, y=545)
Checkbutton(root,text="2)Being Shy or Socially Awkward                                    ",command=cercle).place(x=40, y=575)
Checkbutton(root,text="3) Having a Learning Disability or Emotional or Behavioral Disorder",command=cercle).place(x=40, y=605)

#Les types d agression
label = Label(root, text="Les types d'agression", bg="gold2")
label.place(x=560,y=515)
Checkbutton(root,text="Physical bullying",command=type1).place(x=560,y=545)
Checkbutton(root,text="Verbal bullying  ",command=cercle).place(x=560,y=575)
Checkbutton(root,text="Social bullying  ",command=cercle).place(x=560,y=605)

#Go
BoutonGo = Button(root, text ='Go', command = go)
BoutonGo.place(x=570, y=680)

#effacer
BoutonEffacer = Button(root, text ='Effacer', command = Effacer)
BoutonEffacer.place(x=610, y=680)


#BoutonGo = Button(root, text ='cercle', command = cercle)
#BoutonGo.pack(side = LEFT, padx = 10, pady = 10)

#BoutonGo = Button(root, text ='deplacement', command = deplacement)
#BoutonGo.pack(side = LEFT, padx =
 10, pady = 10)
root.mainloop()
