from tkinter import *



from random import randrange



import math,random



import cmath



import numpy



import time







WIDTH = 1500



HEIGHT = 500







root = Tk()



canvas = Canvas(root, width = WIDTH, height= HEIGHT, bg='grey')



canvas.pack(padx =5, pady =5)



root.title('Bouncing Ball')



canvas.pack()







LARGEUR = 1200



HAUTEUR = 500



RAYON = 13 # rayon de la balle


#Probabilite liee a la transformation d'une balle
P= random.random()
print('P=',P)


cangle=cmath.exp(0.03j)



cangle2=cmath.exp(0.070j)



cangle3=cmath.exp(0.035j)



cangle4=cmath.exp(0.06j)



cangle5=cmath.exp(0.025j)







cangle6=cmath.exp(0.025j)



cangle7=cmath.exp(0.015j)



cangle8=cmath.exp(0.01j)

cangleBT=cmath.exp(0.065j)






print(cangle)







# position initiale au milieu



X=30



X2=1



X3=50



X4=70



X5=90



X6=110



X7=130



X8=150







Y=30



Y2=1



Y3=50



Y4=70



Y5=90



Y6=110



Y7=130



Y8=150

XBT=90
YBT=90







XC=LARGEUR/2



YC=HAUTEUR/2







#Couleur



def couleur(Color):



    """



    definit une couleur aleatoirement entre vert = ami, red = agresseur, white = neutre



    """



    x1=random.random()



    #Color=[]







    if x1>= 0 and x1 <= 0.2:



        Color.append('red')



    elif x1>0.20 and x1 <=0.60:



        Color.append('green')



    elif x1>0.6:



        Color.append('white')



        



    return Color







L=[]







for i in range(20):



    L=couleur(L)



    



    

print(L)

#Deplacement



    

def deplacement():



    """  deplacement de la balle, situation initiale 1 rouge, 1 bleue, 1 blanche """



    global X,X2,X3,X4,X5,X6,X7,X8,Y,Y2,Y3,Y4,Y5,Y6,Y7,Y8,YBT,XBT,DX,DY,RAYON,LARGEUR,HAUTEUR,TX,TX2,TY,TY2, Arret

    

    z=random.sample(L,1)

    z2= random.sample(L,1)



    

    TX=90

    TX2=90



    Xgreen= 70

    Ygreen = 70

    

    Xred = 30

    Yred = 30

    

    TY=90

    TY2=90





    



    if z == ['green']:



        TX= Xgreen

        TY= Ygreen

        



    elif z == ['red']:



        TX= Xred

        TY= Yred

    if z2 == ['green']:



        TX2= Xgreen

        TY2= Ygreen

        

    elif z2 == ['red']:



        TX2= Xred

        TY2= Yred



        

    print('TX=',TX)

    print('TY=',TY)

    print('TY2=',TY2)

    print('TX2=',TX2)

    print('z=',z)

    print('z2=',z2)



    Balle = canvas.create_oval(X-RAYON,Y-RAYON,X+RAYON,Y+RAYON,width=1,fill='red')



    Balle2 = canvas.create_oval(X2-RAYON,Y2-RAYON,X2+RAYON,Y2+RAYON,width=1,fill='blue')



    Balle3 = canvas.create_oval(TX-RAYON,TY-RAYON,TX+RAYON,TY+RAYON,width=1,fill=z)



    Balle4 = canvas.create_oval(TX2-RAYON,TY2-RAYON,TX2+RAYON,TY2+RAYON,width=1,fill=z2)



    Balle5 = canvas.create_oval(X5-RAYON,Y5-RAYON,X5+RAYON,Y5+RAYON,width=1,fill='white')



    Balle6 = canvas.create_oval(X6-RAYON,Y6-RAYON,X6+RAYON,Y6+RAYON,width=1,fill='black')



    Balle7 = canvas.create_oval(X7-RAYON,Y7-RAYON,X7+RAYON,Y7+RAYON,width=1,fill='yellow')



    Balle8 = canvas.create_oval(X8-RAYON,Y8-RAYON,X8+RAYON,Y8+RAYON,width=1,fill='purple')
    
    BalleTransformee = canvas.create_oval(X6-RAYON,Y6-RAYON,X6+RAYON,Y6+RAYON,width=1,fill='white') 

    

    





    Arret=False



    while not(Arret):



    



    











    



        #vitesse des balles







        V=cangle*complex(X,Y)



        X=V.real



        Y=V.imag







        V2=cangle2*complex(X2,Y2)



        X2=V2.real



        Y2=V2.imag  







        V3=cangle3*complex(TX,TY)



        TX=V3.real



        TY=V3.imag







        V4=cangle4*complex(TX2,TY2)



        TX2=V4.real



        TY2=V4.imag







        V5=cangle5*complex(X5,Y5)



        X5=V5.real



        Y5=V5.imag



        



        



        V6=cangle6*complex(X6,Y6)



        X6=V6.real



        Y6=V6.imag



        



        V7=cangle7*complex(X7,Y7)



        X7=V7.real



        Y7=V7.imag



        



        V7=cangle7*complex(X7,Y7)



        X7=V7.real



        Y7=V7.imag



        



        V8=cangle8*complex(X8,Y8)



        X8=V8.real
        Y8=V8.imag
        
        
        VBT=cangleBT*complex(XBT,YBT)
        
        XBT=VBT.real
        YBT=VBT.imag
        
        



        # change color



        colors=["blue","red","green"]



        canvas.itemconfig(Balle2, fill=numpy.random.choice(colors))







        # affichage



        canvas.coords(Balle,XC+X-RAYON,YC+Y-RAYON,XC+X+RAYON,YC+Y+RAYON)



        canvas.coords(Balle2,XC+X2-RAYON,YC+Y2-RAYON,XC+X2+RAYON,YC+Y2+RAYON)

        canvas.coords(Balle3,XC+TX-RAYON,YC+TY-RAYON,XC+TX+RAYON,YC+TY+RAYON)



        canvas.coords(Balle4,XC+TX2-RAYON,YC+TY2-RAYON,XC+TX2+RAYON,YC+TY2+RAYON)



        canvas.coords(Balle5,XC+X5-RAYON,YC+Y5-RAYON,XC+X5+RAYON,YC+Y5+RAYON)



        global cau1,cau2,cau3,ty1,ty2,ty3 



        if cau1==1:



            if ty1 ==1:
                
                
                if t==5 or t==6 or t==7 or t==8 or t==9:

                    canvas.coords(Balle6,XC+X6-RAYON,YC+Y6-RAYON,XC+X6+RAYON,YC+Y6+RAYON)
                    
                if P<=0.8 and t ==10 or t ==11 or t ==12 or t ==13 :
                    canvas.delete(Balle6) 
                    canvas.coords(BalleTransformee,XC+XBT-RAYON,YC+YBT-RAYON,XC+XBT+RAYON,YC+YBT+RAYON)
                        



            if ty2 ==2:



                



                canvas.coords(Balle6,XC+X6-RAYON,YC+Y6-RAYON,XC+X6+RAYON,YC+Y6+RAYON)



                canvas.coords(Balle7,XC+X7-RAYON,YC+Y7-RAYON,XC+X7+RAYON,YC+Y7+RAYON)



            if ty3 ==3 :



                canvas.coords(Balle8,XC+X8-RAYON,YC+Y8-RAYON,XC+X8+RAYON,YC+Y8+RAYON)



                canvas.coords(Balle6,XC+X6-RAYON,YC+Y6-RAYON,XC+X6+RAYON,YC+Y6+RAYON)



                canvas.coords(Balle7,XC+X7-RAYON,YC+Y7-RAYON,XC+X7+RAYON,YC+Y7+RAYON)







        if cau2 == 2:



            if ty1 ==1 :



                print('cause2 et type1')



            if ty2 ==2 :



                print('cause2 et type2')



            if ty3 ==3 :



                print('cause2 et type3')



        



        if cau3 == 3:



            if ty1 ==1 :



                print('cause3 et type1')



            if ty2 ==2 :



                print('cause3 et type2')



            if ty3 ==3 :



                print('cause3 et type3')



        



        root.update()



        time.sleep(0.04)



        







      



    



#Timer



t = 0



def timer():



    global t



    if t < 30:



        new_time = heur.get() + 1



        heur.set(new_time)



        root.after(1000, timer) # call this function again in 1,000 milliseconds



        t += 1
    



heur = IntVar()



heur.set(0)



            



frame = Frame(root, width=500, height=500)



frame.pack()







timer_display = Label(root, textvar= heur)



timer_display.place(x= 600, y= 495, anchor = CENTER)



        



#Cause        



cau1=0



def cause1():



    global cau1, Arret 



    Arret=False



    if not(Arret):



        cau1=1



        print('cause1')



        



cau2=0



def cause2():



    global cau2, Arret 



    Arret=False



    if not(Arret):



        cau2=2



        print('cause2')







cau3=0



def cause3():



    global cau3, Arret 



    Arret=False



    if not(Arret):



        cau3=3



        print('cause3')







#type



ty1=0



def type1():



    global ty1, Arret 



    Arret=False



    if not(Arret):        



        ty1=1



        print('type1')



        



ty2=0



def type2():



    global ty2, Arret 



    Arret=False



    if not(Arret):        



        ty2=2



        print('type2')



        



ty3=0



def type3():



    global ty3, Arret 



    Arret=False



    if not(Arret):        



        ty3=3



        print('type3')



        







#Go        



def go():



    #timer



    global t



    t=0



    heur.set(0)



    timer()     



    deplacement()



    



    



    



#Effacer



def Effacer():



    global t



    t=30



    heur.set(30)



    



    global Arret



    Arret=True



    canvas.delete('all')



    global cau1,cau2,cau3,ty1,ty2,ty3



    cau1 = 0



    cau2 = 0



    cau3 = 0



    ty1 = 0



    ty2 = 0



    ty3 = 0



    



Arret=False











# Echelle 



def maj(nouvelleValeur):



    # nouvelle valeur en argument



    print(nouvelleValeur)



def plus():



    Valeur.set(str(int(Valeur.get())+1))



    print(Valeur.get())



def moins():



    Valeur.set(str(int(Valeur.get())-1))



    print(Valeur.get())







Valeur = StringVar()



Valeur.set(0)



print(Valeur)











        







#Les positions et boutons







# Création d'un widget Scale



echelle = Scale(root,from_=0,to=5,resolution=1,orient=HORIZONTAL,\



length=300,width=20,label="Nombre d'amis",tickinterval=1,variable=Valeur,command=maj)



echelle.place(x=830, y=515)







# Création d'un widget Button (bouton +)



Button(root,text="+",command=plus).place(x=965, y=605)







# Création d'un widget Button (bouton -)



Button(root,text="-",command=moins).place(x=985, y=605)







#Les causes d agression



label = Label(root, text="Les causes d'agression", bg="gold2")



label.place(x=40,y=515)



Button(root,text="Different race",command=cause1).place(x=40, y=545)



Button(root,text="Mental disorder",command=cause2).place(x=40, y=575)



Button(root,text="Different sexual orientation",command=cause3).place(x=40, y=605)







#Les types d agression



label = Label(root, text="Les types d'agression", bg="gold2")



label.place(x=560,y=515)



Button(root,text="Social bullying",command=type1).place(x=560,y=545)



Button(root,text="Physical bullying",command=type2).place(x=560,y=575)



Button(root,text="Verbal bullying",command=type3).place(x=560,y=605)







#Go



BoutonGo = Button(root, text ='Go', command = go)



BoutonGo.place(x=570, y=680)







#effacer



BoutonEffacer = Button(root, text ='Effacer', command = Effacer)



BoutonEffacer.place(x=610, y=680)











#BoutonGo = Button(root, text ='cercle', command = cercle)



#BoutonGo.pack(side = LEFT, padx = 10, pady = 10)







#BoutonGo = Button(root, text ='deplacement', command = deplacement)



#BoutonGo.pack(side = LEFT, padx = 10, pady = 10)



root.mainloop()
